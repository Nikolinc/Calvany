// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum role {
  USER
  ADMIN
}

model users {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  email     String    @unique
  firstname String?
  lastname  String?
  fullname  String?   
  role      role      @default(USER)
  rating    rating[]
}

model measurements {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @updatedAt @map(name: "updated_at")
  width     String
  depth     String
  height    String  
  product   products[]  // Обратное отношение // Обратное отношение
}
model details {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @updatedAt @map(name: "updated_at")
  name      String
  value     String
  product   products[]  // Обратное отношение
}

model colors{
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  updatedAt    DateTime   @updatedAt @map(name: "updated_at")
  name         String
  value        String
  products     products[]
}

model rating{
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  updatedAt    DateTime   @updatedAt @map(name: "updated_at")
  count        Int
  users        users[]
  products     products[]
}

model products {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  updatedAt    DateTime   @updatedAt @map(name: "updated_at")
  article      String
  name         String
  description  String  
  published    Boolean    @default(false)
  colors       colors[]
  categories   categorys[]
  details      details[]
  
  rating    rating[]
  measurements measurements[]
}
model news {
  id            Int        @id @default(autoincrement())
  title         String?
  content       String?   @unique
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
}
model categorys {
  id    Int    @id @default(autoincrement())  
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  name  String
  posts products[]
}